-- 0. 레벨 이름들 검색
SELECT * FROM CLEVEL;
SELECT * FROM CUSTOMER;
-- 1. 회원가입(고객 전화와 고객 이름은 입력받아 INSERT)
INSERT INTO CUSTOMER (CID, CTEL, CNAME)
    VALUES(TO_CHAR(CUSTOMER_ID_SQ.NEXTVAL), '010-6666-6666', '유희열');
COMMIT; -- COMMIT이나 ROLLBACK을 하지 않으면 자바에서 문제 발생

-- 2. 핸드폰 뒷4자리(FULL) 검색 - CID, CTEL, CNAME, CPOINT, CAMOUNT, LEVELNAME, NEEDAMOUNT
SELECT CID, CTEL, CNAME, CPOINT, CAMOUNT, LEVELNAME, (SELECT MAX_NEED+1-CAMOUNT FROM CUSTOMER WHERE LEVELNO!=3 AND CID=C.CID) NEEDAMOUNT
        FROM CUSTOMER C, CLEVEL L
        WHERE C.LEVELNO = L.LEVELNO
        AND CTEL LIKE '%'||'9999';
    
SELECT CNAME, CAMOUNT, (SELECT MAX_NEED+1-CAMOUNT FROM CUSTOMER WHERE LEVELNO!=3 AND CID=C.CID)
    FROM CUSTOMER C, CLEVEL L
    WHERE C.LEVELNO=L.LEVELNO;  -- 이용할 서브쿼리
    
-- 3. 물품 구매
    -- public int buy(int cid, int price)
    -- 1단계 : CPOINT, CAMOUNT 수정
    UPDATE CUSTOMER
        SET CPOINT = CPOINT+0.05*1000000,
            CAMOUNT= CAMOUNT+1000000
        WHERE CID = 1;
    -- 2단계 : 수정된 CAMOUNT에 따라 LEVELNO 조정
    SELECT CID, CNAME, CAMOUNT, C.LEVELNO 현레벨, L.LEVELNO 바뀔레벨, MIN_NEED, MAX_NEED
        FROM CUSTOMER C, CLEVEL L
        WHERE CAMOUNT BETWEEN MIN_NEED AND MAX_NEED;
    SELECT L.LEVELNO
        FROM CUSTOMER, CLEVEL L
        WHERE CAMOUNT BETWEEN MIN_NEED AND MAX_NEED AND CID=1; --CID가 1인 데이터의 바뀔 레벨
    UPDATE CUSTOMER
        SET LEVELNO = (SELECT L.LEVELNO
                        FROM CUSTOMER, CLEVEL L
                        WHERE CAMOUNT BETWEEN MIN_NEED AND MAX_NEED AND CID=1)
        WHERE CID=1;
    -- DAO에 들어갈 QUERY 완성 (1단계 + 2단계)
    UPDATE CUSTOMER
        SET CPOINT = CPOINT+0.05*1000000,
            CAMOUNT= CAMOUNT+1000000,
            LEVELNO = (SELECT L.LEVELNO
                        FROM CUSTOMER, CLEVEL L
                        WHERE CAMOUNT+1000000 BETWEEN MIN_NEED AND MAX_NEED 
                            AND CID=1)
        WHERE CID = 1;
        
-- UPDATE CUSTOMER SET LEVELNO= LEVELNO+1
--    WHERE 0 > (SELECT MAX_NEED-(CAMOUNT+1000000) NEEDAMOUNT FROM CUSTOMER, CLEVEL
--        WHERE CAMOUNT BETWEEN MIN_NEED AND MAX_NEED);

-- 3번 후 바뀐 고객 정보를 출력(CID, CTEL, CNAME, CPOINT, CAMOUNT, LEVELNAME, NEEDAMOUNT)
    -- public CustomerDto getCustomer(int cid)
SELECT CID, CTEL, CNAME, CPOINT, CAMOUNT, LEVELNAME, (SELECT MAX_NEED+1-CAMOUNT FROM CUSTOMER WHERE LEVELNO!=3 AND CID=C.CID) NEEDAMOUNT
        FROM CUSTOMER C, CLEVEL L
        WHERE C.LEVELNO = L.LEVELNO -- 최고 레벨일 때는 필요금액을 0으로 만들고 싶음.
        AND CID=5;
        
-- 4번 전 고객 등급명들 추출
    --public ArrayList<String> getLevelNames()
    SELECT LEVELNAME FROM CLEVEL;
    
-- 4. 등급별출력 LEVELNAME을 입력받아 CID, CTEL, CNAME, CPOINT, CAMOUNT, LEVELNAME, NEEDAMOUNT
    -- public ArrayList<CustomerDto> levelNameGetCustomers(String levelName)
SELECT CID, CTEL, CNAME, CPOINT, CAMOUNT, LEVELNAME, (SELECT MAX_NEED+1-CAMOUNT FROM CUSTOMER WHERE LEVELNO!=3 AND CID=C.CID) NEEDAMOUNT
        FROM CUSTOMER C, CLEVEL L
        WHERE C.LEVELNO = L.LEVELNO
            AND LEVELNAME = '일반고객'
        ORDER BY CAMOUNT DESC;

-- 5. 고객 전체출력 : CID, CTEL, CNAME, CPOINT, CAMOUNT, LEVELNAME, NEEDAMOUNT
    -- public ArrayList<CustomerDto> getCustomers()
SELECT CID, CTEL, CNAME, CPOINT, CAMOUNT, LEVELNAME, (SELECT MAX_NEED+1-CAMOUNT FROM CUSTOMER WHERE LEVELNO!=3 AND CID=C.CID) NEEDAMOUNT
        FROM CUSTOMER C, CLEVEL L
        WHERE C.LEVELNO = L.LEVELNO;

-- 6. 회원탈퇴 (CTEL을 입력받아 DELETE)
    -- public int deleteCustomer(String ctel)
DELETE FROM CUSTOMER 
    WHERE CTEL='010-9999-9999';
ROLLBACK;
COMMIT;



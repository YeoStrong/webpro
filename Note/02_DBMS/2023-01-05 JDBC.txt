JDBC

1. JDBC(Java Database Connectivity) 프로그래밍 개념 : 자바 패키지의 일부로 자바 프로그램이 데이터 베이스와 연결되어 데이터를 주고 받을 수 있게 해 주는 프로그래밍 인터페이스

2. JDBC프로그래밍 단계와 사용 클래스
	① JDBC 드라이버 로드 (JDBC 드라이버를 로드) : Class.forName()을 이용. 드라이버 클래스 로딩(드라이버 필요)
		사용 API : Class.ForName()
	② 데이터베이스 연결 (DB에 연결) : DriverManager.getConnection()을 이용해 Connection 객체 생성(접속 URL, id, pw등 필요)
		사용 API : java.sql.Connection
	③ Statement 생성 (SQL문을 수행할 객체 생성) : SQL을 이용해 DB를 조회하거나 다룸. Statement는 SQL 처리 기본 객체
		사용 API : java.sql.Statement	java.sql.preparedStatement
	④ SQL문 전송 (SQL문 수행전송하고 결과 받음): SQL 문 Statement 객체의 executeQuery(), executeUpdate() 메소드를 이용, 데이터베이스로 전달해 처리
		사용 API : java.sql.Statement.executeQuery()	java.sql.Statement.executeUpdate()
	⑤ 결과 받기 : SQL 실행 결과를 반환 받아야 하는 값이 있다면 ResultSet객체로 받음
		사용 API : java.sql.ResultSet
	⑥ 결과 받아 원하는 로직 수행 (수행한 결과를 읽어 원하는 로직을 수행 (필요할 때까지 반복)
	⑦ 연결 해제 ( DB 연결을 끊음) : 사용한 자원을 반납
		사용 API : java.sql.Connection.close()

3. JDBC 소스

(1) 단순 연결
	Class.forName(“oracle.jdbc.driver.OracleDriver”);
	Connection conn = DriverManager.getConnection(url, uid,pwd); //관계형 데이터베이스 엔진에서 위치을 연결
		-url : 사용자 계정
			-String url =” jdbc:oracle:thin:@127.0.0.1:1521:xe”;
           			-프로토콜:서브프로토콜:서브네임(ip주소:포트:DB이름
		-uid : user id
		-pwd : user password
	conn.close()

(2) Select
	-Statement객체 : 이전 단계에서 생성한 Connection 객체(conn)로 접근해서 createStatement()메소드를 호출하여 생성
		Statement stmt = conn.createStatement();
	-Statement객체로 질의문 수행
		-String str = “SELECT * FROM EMP;
		-ResultSet rs= stmt.excuteQuery(str);
	rs.next() : 현재행에서 한행 앞으로 이동
	rs.previouse() : 현재행에서 한행 뒤로 이동
	rs.first() : 현재 행에서 첫번재 행의 위치로 이동
	rs.last() : 현재 행에서 마지막 행의 위치로 이동
	rs.cloase() stmt.close() conn.close()

(3) Insert
	-stmt.excuteQuery(sql)
		-Select시 사용 반환값이 ResultSet
	-stmt.excuteUpdate(sql)
		-insert, update, delete시 사용. 반환값이 정수형을 반환. 작업에 성공한 횟수 리턴하여 DML명령어(insert, update, delete)가 제대로 수행되었는지 확인 가능


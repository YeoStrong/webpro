API-1.

1. JDK 라이브러리(자바 표준 라이브러리)
	지금까지 그냥String클래스와 System클래스도 모두 이 이 라이브러리에 속한 클래스(JDK안에 포함).

	※JDK에서 많은 패키지 제공

	① java.lang 자바프로그램의 기본적인 기능을 제공. 명시적으로 지정하지 않아도 모든 자바 프로그램에 포함되는 패키지 	java.lang.String나 java.lang.Exception은 모두 java.lang.을 생략 가능
	② java.util 유용한 유틸리티 클래스를 제공
	③ java.io 입출력 기능을 제공하는 패키지
	④ java.awt 그래픽 유저인터페이스(GUI)를 구축하기 위한 다양한 컴포넌트를 제공하는 패키지
	⑤ java.awt.event awt컴포넌트들의 이벤트를 제어하는 패키지

2. JAVA 필수 API
	JAVA는 개발자들이 편리하게 이용할 수 있는 클래스들이 많다.
	이러한 클래스들을 이용해서 개발자들은 깊은 지식이 없이 사용할 수 있음.
	이러한 기능들을 정의해 둔 클래스들을 API(Application Programming Interface)라고 함. 

3. String의 주요 기능들(메소드)
	String concat(String str) : 저장된 문자열과 str문자열을 결합
	String substring(int begin) : 시작위치부터 마지막까지의 문자열을 반환
	int length() : 문자열 길이를 반환
	String toUpperCase() : 대문자로 반환
	String toLowerCase() : 소문자로 반환
	char charAt(int index) : index 위치의 문자를 반환
	int indexOf(char ch) : 첫번째 ch문자의 위치를 반환
	int lastIndexOf(char ch) : 마지막 ch문자의 위치를 반환
	boolean equals(String str) : 지정된문자열과 str문자열이 같은지 비교
	boolean equalslgnoreCase(String str) : 대소문자 구분 없이 지정된문자열과 str문자열이 같은지 비교
	String trim() : 문자열 앞뒤 공백제거
	String replace(char old, char new) : 문자열 내의 old문자를 new문자로 반환
	String  repalceAll(String old, String new) : 문자열 내의 old문자열을 new로 반환

	3-1. String의 문제점
		※ String은 메모리를 과소비함.
		String클래스는 많이 쓰이고, 좋은 기능(메소드)를 많이 가지고 있다. 하지만 치명적인 단점이 있다.
		바로 메모리를 과소비 하는 것. String객체의 경우 처음 초기화된 데이터에 변화가 생기면 기존 것을 재활용하지 않고 기존의 것은 버리고 새로운 메모리를 이용
		위의 메소드는 String 객체가 가지고 있는 문자열의 내용을 바꾸는 것이 아니라 바뀐 내용을 갖는 새로운 String객체를 생성
		그렇기 때문에 문자열 조작을 많이 하는 프로그램에서 이런 메소드를 많이 사용하면 String 객체가 너무 많이 생기기 때문에 비효율적. 
		많은 객체를 만들게 되면 메모리도 많이 쓰게 되고 프로그램의 성능도 떨어지기 때문.

	3-2. StringBuffer와 StringBuilder의 등장
		문자열 변수의 잦은 내용 변경이 불가피할 시에는, Stirng 클래스의 새로운 메모리를 생성하는 문제로 인해 속도가 느려짐.
		그럴 때는 문자열 조작에 적합하게 만들어진 다른 클래스를 사용하는 것이 좋다.
		문자열 조작에 적합하게 만들어진 클래스로는 StringBuilder클래스와 StringBuffer클래스가 있다. 
		이 클래스들은 모두 객체 내부에 있는 버퍼(buffer, 데이터를 임시로 저장하는 메모리)에 문자열의 내용을 저장해 두고 그 안에서 추가, 수정, 삭제 작업을 함. 
		그렇게 때문에 이 클래스들은 이용하면 새로운 객체를 만들지 않고도 문자열 조작을 할 수 있음.
		그래서 속도적인 측면에서 더욱 개선된 StringBuffer와 StringBuilder가 등장.

	※ StringBuilder 주요 기능(메소드)
		append(String str) : 문자열 str 추가
		insert(int index, String str) : 특정 index에 문자열 str 추가
		delete(int start, int end) : index위치 start부터 end앞 까지 삭제
		deleteCharAt(int index) : index위치의 특정 문자 하나 삭제
		int capacity() : 문자열 크기 반환
		ensureCapacity(int size) : 버퍼의 크기를 size만큼 늘리는 메소드
		trimToSize() : 과도한 버퍼 크기를 적당하게 줄이는 메소드

	※StringBuffer와 StringBuilder는 약간의 차이가 있을 뿐 거의 같다. 
	  단, StringBuffer가 StringBuilder보다 먼저 세상에 등장 한 클래스. 
	  기능은 같고, 단지 StringBuilder가 속도 면에서 좀 더 빠름.

	※개발 테스트에 많이 쓰이는 System.currentTimeMillis()
		System.currentTimeMillis()는 1970년도부터 현재까지의 밀리세컨(1/1,000초) 단위로 표시. 거의 속도 테스트

	※StringTokenizer 주요 기능(메소드) : 문자열 분할

4. 날짜(Calendar와 GregorianCalendar) API
	※날짜와 시간을 표현할 때 많이 쓰이는 Calendar클래스는 싱글톤클래스
	※날짜와 시간을 표현할 때 많이 쓰이는 GregorianCalendar클래스는 일반클래스


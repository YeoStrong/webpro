상속
- 상속(Inheritance) : 상속이란 부모클래스가 가지고 있는 속성과 메서드를 활용할 수 있는 개념 


	1. 일상에서 알고 있는 상속과 비슷한 개념
	※ 객체지향의 핵심적인 요소는 상속과 추상화.
	프로그래밍에서도 어떤 클래스가 다른 클래스로부터 데이터(속성)와 메소드(기능)를 상속받을 수 있다.**
	이럴 경우 상속받은 객체는 상속해 준 객체의 데이터 및 메소드를 이용할 수 있고 또는 변경할 수도 있다.**

	상속을 통해서 많은 개발시간을 단축시킬 수 있다. 또 기존에 만들어진 클래스는 검증이 된 클래스이므로, 시행착오도 줄일 수 있음.**


	2. 상속 문법의 이해
		접근제어자 [final/abstract] class 클래스이름 extends 상위클래스(super class) {
		추가할 멤버변수선언;
		생성자;
		추가할 메소드선언;
    	}

		(1) 상속이란 기존의 클래스를 재사용해서 새로운 클래스를 작성하는 것
		(2) 두 클래스를 부모와 자식(조상과 자손)으로 관계를 맺어줄 수 있다.
		(3) 자손은 조상의 멤버를 상속받으나, private멤버는 직접 제어할 없다.
	   	    자손의 멤버 개수는 조상보다 작을 수 없다(같거나 많다).
		(4) 자바에서는 다중 상속이 지원되지 않는다.


	3. 상속이 필요한 이유
	(1) 모든 개발을 처음부터 하얀 도화지에 할 필요는 없다. 선구자들이 만들어 놓은 프로그램이 있다면 
	상속을 통해서 훌륭한 결과물을 빠른 시간 내에 만들 수 있다. 기존의 훌륭한 프로그램은 대부분 검증이 잘 되어 있어 버그도 거의 없는 경우가 많다.

	(2) 다양한 객체(타입)를 상속을 통해서 하나의 객체(타입)으로 묶을 수 있다.


	4. Object 클래스
	- 모든 클래스의 최상위 클래스
	- 조상이 없으면 자동적으로 Object 클래스 상속받음
	- 모든 클래스는 Object클래스에 정의된 11개의 메서드를 상속받는다.


	5. 오버라이드(override : 재정의)의 이해
	(cf)생성자 오버로딩(overloading=polymorphism 중복정의) : 인자의 타입이 다르면 같은 이름의 메소드라도 다른 기능으로 중복정의가 가능한 것
	(cf)오버라이드(override=재정의) : 부모 클래스의 메소드를 자식 클래스에서 재정의 함. 
				      자식 클래스가 부모 클래스를 상속하여 자식한테 없는 메소드를 호출하면 부모클래스에 가서 해당 메소드를 찾게 됨.
				      만약 부모 클래스의 메소드를 자식클래스에서 동일한 이름으로 다시 재정의 하면 부모클래의 메소드를 찾지 않고 자식 클래스의 메소드를 호출하게 된다. 
				      이것을 오버라이드(재정의)라고 한다.


	6. 생성자 함수 실행 순서
		① 디폴트 생성자는 JVM이 제공해주지만, 클래스 내의 매개변수가 있는 생성자가 하나라도 존재하게 되면 JVM은 더 이상 디폴트 생성자를 제공해 주지 않게 된다. 
		② 만일 수퍼 클래스에 매개 변수가 있는 생성자를 정의하면서 매개 변수 없는 디폴트 생성자를 정의하지 않으면 수퍼 클래스에는 매개 변수 없는 생성자가 존재하지 않게 된다. 
		③ 이러한 상태에서 서브 클래스의 생성자는 수퍼 클래스의 매개 변수 없는 디폴트 생성자를 여전히 호출하고 있기에 존재하지 않는 생성자를 호출하는 셈이 되어 문제가 발생하게 된다.


	7. super키워드(오버라이드의 장점과 단점의 이해)
   		super란? super는 부모를 찾는 키워드
    		⑴ 하위 클래스에 의해 가려진 상위클래스의 멤버변수나 메소드에 접근할 때
      			super.객체변수
       			super.메소드이름(매개변수)
       			override의 장점은 잘 만들어진 클래스를 상속받아 일부 메소드를 수정(재정의) 할 수 있다는 것
       			하지만, 자식클래스에서 부모클래스를 override하면 부모클래스의 메소드는 사용할 수가 없음.
       			이것이 override의 단점이라고 할 수 있다.
        			자식 클래스에서 부모클래스의 메소드를 사용하고자 할 때 super키워드를 사용( cf. this )


		⑵ 상위클래스의 생성자를 호출할 때
			super(매개변수) ; 이 super(매개변수)문장은 반드시 ***첫 번째 라인***에 와야 한다.
			super() ; 매개변수 없는 슈퍼클래스의 생성자 호출

	※ 상속 시 final
	- final class 클래스명 {} 상속불가
	- final void 메서드명(){} 오버라이딩 금지

추상클래스

1. 추상클래스의 이해
JAVA프로그램에서 부모클래스에서 자식클래스에게 메소드를 *강제로* 재정의(override)하게 하는 클래스.

2. 추상클래스의 문법(※추상메소드에서는 정의만 하고 구현하지 않는다)
    ① abstract(추상클래스 및 추상 메소드를 선언하는 예약어)이용
	public abstract class ClassName {
		…
	}
    ② 추상클래스에는 하나 이상의 추상 메소드가 포함. 추상메소드는 정의만 하고 구현은 안 함.
    ③ 추상메소드에는 메소드의 선언부만 있고 실행부(구현부, Body)는 없다.
	abstract 리턴타입 methodName([매개변수])
    ④ 추상 클래스에서는 메소드 선언만 하고 실제로 구현은 상속받는 클래스에서 한다. 
       기능은 자식 클래스에게 위임 - 추상클래스에서 정의된 추상적인 기능은 하위 클래스에서 상세 구현
    ⑤ 클래스의 프레임만 구성. 직접 객체 생성 불가능(abstract는 인스턴스화를 금지하는 키워드)

3. 추상클래스가 필요한 이유
   ※강제성을 느낄 때 사용
	객체지향 언어를 하다 보면 추상화 또는 추상개념 등의 '추상'이라는 말을 많이 접하게 될 것.
	프로그래밍에서 ‘추상'이라는 것은 일반생활에서의 '추상'과 동일 합니다.
	어떤 행위(메소드)를 추상적으로 정의만 해놓고, 실제로 필요한 곳에서 필요에 따라서 재정의 하는 방식.
	상속을 사용하다가, 자식 클래스에서 강제로 무엇인가 꼭 재정의 해서 사용해야 될 경우가 발생되면, 추상클래스 개념을 이용하면 됨
 	 추상 개념은 객체지향 언어에서는 아주 중요한 의미가 있습니다. 그리고 추상적으로 프로그래밍을 한다는 것은 결코 쉬운 일은 아닐 것입니다.
	하지만, 예제를 많이 접해보고, 추후에 알아볼 패턴에 대해서 공부를 하고 나면, 추상적으로 프로그래밍 한다는 것이 얼마나 중요한건지 아실 수 있을 것입니다.  

4. 추상클래스 상속과 일반적인 상속의 차이
   ※차이는 있지만, 어느 쪽이 더 좋다는 없다.
	초기 설계 단계에서 어느 정도 추상과 일반 클래스를 분리하기는 하지만, 프로젝트 개발 도중 언제든지 변경하기도 함(리펙토링)
	부모 클래스의 메소드를 자식 클래스에서 변경할 일이 없다면, 일반 클래스를 이용한 상속이 좋다.
	하지만, 이전 예제처럼 자식클래스에서 꼭 재정의 해야 하는 부분이 있다면, 추상클래스를 이용하여 강제로 재정의하게 해야 함.

5. final(제한자)
※ 추상클래스란 "추상적으로 정의할 테니(선언해 놓을테니), 사용자가 꼭 메소드를 재정의(overriding) 하세요"란 의미
final은 그와는 정반대되는 개념이다.

⑴ 클래스 앞에 붙일 경우 : 상속 금지
	public final class Test {

	}
⑵ 멤버 메소드 앞에 붙일 경우 : 오버라이딩 금지
	public final void print(){
	
	}

5.1 익명 함수
함수는 코드의 집합을 나타내는 자료형. 익명 함수는 다음 형태로 만든다.

var functionVar = function() { }; // 함수 표현식
var functionVar = () => {}; // 화살표 함수
// 매개변수 지정 방법
() => { . . . } // 매개변수가 없을 경우
x =>{ . . . } //매개변수가 한 개인 경우, 소괄호를 생략할 수 있다
(x, y) => { . . . } // 매개변수가 여러 개인 경우, 소괄호를 생략할 수 없다
// 함수 몸체 지정 방법
x => { return x*x } // single line block
x => x * x         // 함수 몸체가 한줄의 구문이라면 중괄호를 생략
() => { return { a: 1 }; }
() => ({ a: 1 })  // 위 표현과 동일하다. 객체 반환시 소괄호를 사용한다.

() => {           // multi line block.
  const x = 10;
  return x * x;
};

※ 익명 함수 생성과 출력 ; 이름이 없으므로 변수에 넣어 사용해야 한다.
※ 내장함수는 코드를 볼 수 없다. 이름이 있는 함수: ‘선언적 함수’, 함수의 이름이 없는 함수: ‘익명함수’
※ 자바스크립트에서 함수는 하나의 자료형이지만 여타 자료형과 다르게 뒤에 괄호를 열고 닫음으로써 코드를 실행.  이를 함수를 호출한다고 표현.


5.2 선언적 함수
※ function 함수명 ( ) { // 함수 선언식
   }
※	익명함수와 선언적 함수의 차이
<script>
 fun();
 function fun() { alert('함수  A'); } //웹브라우저는 script 태그 내부의 내용을 읽기전에 선언적 함수부터 읽는다
 function fun() { alert('함수 B'); } // 함수를 재정의 하면 기본의 함수는 없어지고, 재정의한 함수를 따른다


5.3 매개변수와 리턴값
function 함수이름(매개변수, 매개변수, 매개변수) {
	//함수 코드
	return 리턴값;
}

※ 리턴값이 없는 경우
<script>
    var fun = function (i) {
      alert('리턴값이 없는 함수 '+i);
    };
    var result = fun(20);
    alert('함수결과 : '+result);
  </script>


5.4 매개변수
자바 스크립트는 함수를 생성할 때 지정한 매개변수보다 많거나 적은 매개변수를 사용하는 것을 허용. 
원래 함수에서 선언된 매개변수보다 많게 사용하면 일반적으로 추가된 매개변수는 무시함. 
원래 함수에서 선언한 매개변수보다 적게 사용하면 지정하지 않는 매개변수는 undefined로 입력됨.
/* 내장함수 중 Array 함수 : 
     *  매개변수가 0개 : length가 0인 배열생성
     *  매개변수가 1개일 때 : 매개변수만큼의 크기를 가지는 배열생성
     *  매개변수가 2개이상일때는 매개변수로 배열을 만든다.  */ 


5.5 가변 인자 함수 ; 매개변수를 선언된 형태와 다르게 사용했을 때, 매개변수를 모두 활용할 수 있는 함수. 
	매개변수의 개수가 변할 수 있는 함수 ex. Array()함수
	arguments : 매개변수 배열


5.6 리턴값 return;


5.7 내부 함수 ; 함수 내부에 선언하는 함수, ※	충돌을 막기 위해 내부함수 사용하면, 내부함수가 우선된다. jQuery는 대부분 선언적 함수를 내부함수로 작성하고 있다


※ 자기호출함수
(fuction(){ … })(); //다른 개발자에게 영향을 주지 않게 함수를 생성하자마자 호출하는 경우


5.8 콜백함수 ; 자바스크립트에서는 함수도 하나의 자료형이므로 매개변수에 넣을 수 있다. 매개변수에 넣어 전달된 함수를 콜백함수라 한다.
※ 콜백함수는 익명함수로 사용하는 경우도 많다.


5.9 함수를 리턴하는 함수
※ 함수가 자료형이므로 매개변수로도 전달할 수 있지만 함수를 리턴하는 함수도 만들 수 있다. 
   특정함수를 여러 번 수행하거나 이벤트 처리를 할 때 필요. 리턴하는 함수를 쓰는 가장 큰 이유는 클로저 때문.


5.10 클로저 ; 리턴된 함수
<script>
        function test(name) {
            var output = 'Hello' + name + '님';
        }
        alert(output);
    </script>
※ 위의 경우 output이 지역변수이므로 함수 외부에서 사용할 수 없어 아래와 같이 클로저를 사용해 본다.
<script>
        function test(name) {
            var output = 'Hello' + name + '님';
            return function () {
                alert(output);
            }
        }
        test('홍길동')(); //140p.
  </script>
※ 클로저 함수로 인해 남은 지역 변수는 각각의 클로저 함수의 고유한 변수이다. 
test1()과 test2()를 호출하면 각 함수가 고유한 지역 변수 output(홍길동, 김길동)이 있다. 


5.11 자바 스크립트 내장 함수


5.11.1 타이머 함수
※ setTimeout(function, millisecond) ; 일정시간 후 함수를 한번 실행
※ setInterval(function, millisecond) ; 일정시간마다 함수를 반복해서 실행
※ clearTimeout(id) ; setTimeout 중지
※ clearInterval(id); setInterval 중지


5.11.2	인코딩과 디코딩 함수 ; 인코딩은 문자를 컴퓨터에 저장하거나 통신에 사용할 목적으로 부호화하는 방법이다. 웹에서는 통신할 때 한글 같은 유니코드 문자가 오작동을 일으킬 수 있으므로 인코딩해야 한다. 문자를 부호화하는 것이 인코딩, 그 반대로 돌리는 것이 디코딩이다.
Google.com을 통해 검색하면 디코딩된 결과를 볼 수 있다.
encodeURIComponent(uriConponent) ; 대부부의 문자를 모두 인코딩
decodeURIComponent(encodedURI);   대부분의 문자를 모두 디코딩


5.11.3 코드 실행함수
※ eval(수식이나 자바스크립코드); 자바스크립 코드를 실행


5.11.4 숫자 확인 함수
※ isFinite() ; number가 유한한 값인지 확인
※ isNaN() ; number가 NaN인지 확인


5.11.5 숫자 변환 함수
<script>
        var won = '1000원';
        var dollar = '1.5$';
        alert(Number(won) + ' : ' + Number(dollar));
        alert(parseInt(won) + ' : ' + parseFloat(dollar));
    </script>


document.write를 이용하면 body에 작성한 것을 초기화 하고
document.write만 출력.
body를 유지하고 싶다면 document.body.innerHTML 이용

java랑 배열의 성격이 달라서 3개짜리 배열을 만들고도 더 추가 가능
그래서 arraylist가 없음.
객체 지향 프로그램

1. 메소드 프로그램의 한계
	-메소드를 이용하면 로직의 재사용이 가능하여 개발을 효율적으로 할 수 있었음
	-절차지향언어에서 중복된 로직을 메소드의 사용으로 인해 효율성을 높일 수 있음
	-하지만, 한 문서 내에 메소드의 수가 많아질 경우 추후 유지 보수에 많은 어려움이 발생

2. 객체의 개념 및 클래스의 이해
	-객체는 관련성 있는 데이터와 메소드가 함께 있는 구성체
	-ex)자동차 라는 객체에는 자동차에는 색상, 배기량, 브랜드, 속도 등의 데이터(속성)가 있음. 드라이브. 주차. 레이싱이라는 메소드가 있음.
	(cf) 객체 모델링 : 현실세계나 추상적인 내용의 속성과 동작을 추려내어 소프트웨어 객체의 필드와 메서드로 정의해 나가는 과정
	(cf) 객체와 클래스
	기계를 만들 때 설계를 하고 설계도면대로 기계를 제작하듯이, 객체의 설계도면인 클래스를 만들고 객체를 생성
	클래스는 객체를 만들기 위한 설계도라고 할 수 있다.
	-객체를 2개 만들 경우 두 객체는 전혀 관계가 없는 독립된 객체
	-두 객체에 같은 항목의 data가 있다고 해도(ex color) 두 color는 완전 별개

3.	객체 자료형과 변수와의 관계
	-	객체 데이터 변수는 값이 아닌 참조값을 저장한다.
	(cf) int value = 10;
	(cf) ClasName classObject = new ClasName();
		      (변수명)




!!!!!!!!!!변수는 소문자, 클래스는 대문자로 시작!!!!!!!!!!!!!!
변수같은 경우 첫 번째, 두 번째까지는 소문자로
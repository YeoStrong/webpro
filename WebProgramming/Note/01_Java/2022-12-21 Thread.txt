Java Thread

1. 프로세스와 스레드란?
실행 가능한 보조기억장치(HDD, SSD)에 있는 파일: 프로그램
프로그램을 실행하게 되면, 이 프로그램은 메모리에 상주하게 되는데 이것이 프로세스. 
하나의 CPU(컴퓨터)가 동시에 여러 프로그램을 동시에 실행하는 것이 멀티 프로세스.
멀티프로세스 시스템에서 각 프로세스는 동시에 실행되는 것처럼 보이지만, 
CPU가 하나이기 때문에 실행시간을 잘게 나누어 프로세스가 돌아가는데 각 프로세스들이 돌아가면서 CPU를 점유하는데 프로세스간 CPU점유작업인 스케줄링을 함
그럼 스레드(멀티스레드)란? 하나의 프로그램이 동시에 여러 개의 일을 수행할 수 있도록 해 주는 것

	-멀티프로세스 vs. 멀티쓰레드
	하나의 새로운 프로세스를 생성하는 멀티프로세스보다 
	하나의 새로운 쓰레드를 생성하는 것이 더 적은 비용이 든다.
	스레드는 두 가지 형태로 존재. 
	하나는 n개의 스레드가 객체 하나를 공유하는 방식이고, 
	또 다른 하나는 n개의 스레드가 각각 객체 n개를 사용하는 방식

	(멀티스레드의 장점)
	자원을 보다 효율적으로 사용.
	사용자에 대한 응답성이 향상
	작업이 분리되어 코드가 간결해짐
	(멀티스레드의 단점)
	동기화(synchronization)에 주의
	교착상태(dead-lock)가 발생하지 않도록 주의
	각 쓰레드가 효율적으로 고르게 실행될 수 있게 해야 한다(☞프로그래밍할 때 고려해야 할 사항들이 많다)


2. 스레드의 생명주기
	가) 생성 
	나) 수행
	다) 대기
	라) 완료


3. 멀티 스레드 문법
(1) Runable 인터페이스 구현을 통한 Target과 Thread
(2) Thread 클래스 상속을 통한 Thread
(3) Runable 인터페이스 구현을 통한 Target과 Thread (target공유)
(4) Thread 클래스 상속을 통한 thread
(5) Target 객체1개, 스레드n개
(6) Target 객체n개, 스레드n개


4. Synchronized
객체에 선언되어 있는 인스턴스 변수를 스레드에서 공유하게 되어, 인스턴스의 값에 영향을 미치게 된다.
이런 경우를 대비해서 JAVA에서는 synchronized라는 키워드를 이용. 
Synchronized는 먼저 수행되는 스레드의 모든 작업이 끝날 때까지 다른 스레드는 기다리도록 하는 예약어
즉, 동기화란? 하나의 자원을 여러 태스크가 사용하려 할 때에, 한 시점에서 하나의 task만이 사용할 수 있도록 하는 것.
대부분의 응용 프로그램에서 다수개의 스레드가 공유할 수 있는 부분이 요구되며 공유부분은 상호배타적으로 사용되어야 함.
예를 들어 좌석 예매시스템이 있다면, 네트워크를 이용하여 여러 매표소에서 좌석이 예매될 때, 
매표소들간에 좌석 예매시스템의 좌석 정보를 동시에 접근할 수 있다면, 같은 좌석을 여러 사람에게 중복되게 예매할 수도 있다. 
따라서 이렇게 여러 데스크들이 하나의 정보에 접근할 때에는, 한번에 하나씩의 데스크만이 접근할 수 있도록 해야 함.

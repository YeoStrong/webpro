1. 멤버변수 선언
   [접근제한자] [static/final] 데이터형 변수명;
① [접근제한자] 접근제한이란 클래스의 데이터나 메소드에 대해서 다른 클래스로부터 접근을 제한하는 것.
 	  - public : 접근을 제한하지 않는다. 다른 모든 클래스에서 사용 가능
  	 - protected : 해당 클래스와 동일한 패키지에 있거나 상속받은 클래스일 경우에만 사용 가능
  	 - default : 접근제어자를 명시하지 않은 경우의 디폴드 접근제어자. 같은 패키지내의 클래스들은 
	      public 권한을 갖고 접근가능
  	 - private : 해당 클래스만이 이 멤버를 사용할 수 있다. 외부객체에서는 접근 불가

②static : 클래스변수(=static 변수)
 	; 객체변수(객체속성)는 객체가 생성될 때마다 각 객체 안의 속성 변수들이 생성되지만, 
	클래스 변수는 클래스로부터 생성된 객체들의 수와 상관없이 하나만 생성됨
	한 클래스로부터 생성된 모든 객체들은 클래스 변수를 공유
	클래스 변수를 이용하여 객체들 사이의 통신에 사용하거나 객체들의 공통속성을 나타낼 수 있음.
	객체변수와 달리 클래스 변수(static 변수)는 클래스 이름을 통하여 접근


i. static의 이해 
	; 객체들끼리 공유하고 싶은 정보가 있을 때 사용. 일명 깍두기.
	필요에 의해 클래스를 만들고, 사용할 때는 new 연산자를 통해 객체로 만들어서 사용함.

ii. static과 객체와의 관계
	※ static 변수를 클래스 변수(정적변수, 공용변수)라 부름.
	객체는 클래스에서 생성(복사)됨
	클래스 하나에서 무한대로 객체를 생성할 수 있고 그러한 객체는 모양은 동일할지 모르지만, 전혀 다른 객체임. 
	하지만  static이 붙은 변수는 객체 변수가 아닌 클래스 변수로써 객체가 생성되기 전에 이미 존재함. 
	(객체를 생성하지 않고 클래스 내 변수를 사용) **객체 생성과 상관없이 사용할 수 있는 필드와 메서드에 활용할 수 있음.

iii. static의 장점과 단점
	객체 생성을 하지 않고도 사용할 수 있는다는 것은 분명 장점
	하지만 garbage collector의 관리 밖에 있기 때문에 항상 메모리에 상주해 있음. 
	즉 프로젝트가 커지고, 시스템이 오랜 시간 동안 돌아가게 되면 시스템 운영속도가 점차 느려지다가 
	멸망하는 수가 있음. 따라서 static의 사용은 신중해야 한다.

③ [static/final]
	final : 종단변수
	static 변수로 사용되는 대표적인 예는 아마도 상수 
	만약 예를 들어 프로그래밍을 하다가 원주율이 빈번히 사용되어야 한다면 이러한 값은 상수(final 변수)로 정의해 놓고 사용하는 편이 좋다


2. 패키지의 이해
   	패키지란? 프로그래밍에서 여러 클래스를 관리하기 위해 기능적으로 영향을 미칠 수 있는 클래스끼리 묶어 놓고, 접근 범위 안에 효과적으로 호출하기 위해서 사용하는 개념
	윈도우에는 윈도우탐색기가 있다. 윈도우 탐색기는 컴퓨터에 보관되어 있는 파일을 관리하기 위해 폴더를 만들고, 그러한 폴더를 효율적으로 다루기 위해 존재함. 
	즉 폴더 구조를 한눈에 볼 수 있도록 만들어진 프로그램
	JAVA에도 많은 ~.java파일들이 존재한다. 많은 정도가 예상하기도 힘들 정도로 많이 존재한다. 
	또한 우리가 프로그래밍을 하면서 계속적으로 .java파일을 만들 것이다. 이러한 많은 파일을 효율적으로 관리하기 위해 JAVA에서는 ‘패키지’라는 구조를 사용

	(1) 자바(jdk)에서 제공하는 클래스(약 3000개)
		① http://www.oracle.com/technetwork/java/javase/documentation/jdk8-doc-downloads-2133158.html 에 접속하여 다운받거나 온라인으로 https://docs.oracle.com/javase/8/docs/api/index.html 에 들어가 API들을 볼 수 있다.
		② JAVA API(Application Programming Interface) : 자바에서 기본적으로 제공되는 클래스의 설명들을 볼 수 있다. 패키지를 모르면 "All Classes"를 선택하여 쉽게 찾아볼 수 있다. 자주 보는 습관을 갖자.
		③ 모든 클래스들이 패키지로 관리되어 있는 것을 볼 수 있다. 해당 패키지에는 해당클래스를 볼 수 있다.
		④ 패키지 : 관련있는 클래스들을 패키지로 그룹지어 관리하는 것(클래스를 모아 놓은 폴더)*****
 	 	   ex. Scanner 클래스는 java/util폴더에 있는 Scanner클래스
	 	     	 (java.util.Scanner)
   	 	   ex. Math클래스는 java/lang폴더에 있는 Math클래스 : java.lang 패키지의 클래스는 import 생략.
        	  	   	 (java.lang.Math)

	(2) 우리가 만든 패키지
		JAVA(jdk)에 패키지가 있듯이 우리도 클래스를 만들 때 패키지로 관리하면 효율적인 작업을 할 수 있다

	(3) 정답은 없지만, 효율적으로 해야 하는 패키지의 일반적인 설계방식
		① 패키지 이름만 봐도 어떤 클래스들이 모여있는지 알 수 있도록 만들고 싶은데 그게 쉽지 않은 것이죠. 패키지 이름은 유일한 이름이여야 함. 이유는 우리회사에서 개발한 소스(.java파일)를 다른 곳에 이식하려 할 때 이름이 중복되면 안 되기 때문이다. 
		    그래서 주로 패키지 이름은 유니크한 도메인 주소를 역방향으로 하여 만든다. 예를 들어 회사 도메인이 www.lect.com 이라면, ‘com.lect.*’라고 하고 뒤에 기능별 또는 개발팀에서 정한 규칙에 의해 패키지명을 만든다.
		② 물론 패키지명은 개발 중 언제든지 수정이 가능, 패키지 간의 클래스 이동도 가능. 너무 심하게 얽매일 필요는 없음
		③ 명명규칙은 변수와 같이 숫자로 시작할 수 없고, _나 $를 제외한 특수문자를 사용할 수 없다. 모두 소문자로 작성하는 것이 일반적.

	(4) import의 이해 : 다른 패키지의 클래스를 가져오자~
		패키지를 만들고 클래스를 만든 후 서로 다른 패키지의 클래스를 사용하려고 할 때는 반드시 import 키워드를 사용해서 해당 클래스를 imfort 해야 합니다. 이클립스는 자동으로 imfort 지원
		(cf) 동일한 패키지의 클래스는 imfort가 필요없음.
		(cf) import com.lect.ex.*; //com.lect.ex.* 패키지 안에 있는 모든 것. 패키지내에 너무 많은 클래스가 있을 경우엔 메모리 환경에 안 좋은 영향을 미치나
		요즘은 메모리 환경이 좋아 이런 방식을 많이 사용.

Java Collection

1. Collection
자료 구조, 데이터 그룹을 의미.
배열과 비슷한 구조지만 다수의 데이터를 쉽게 처리할 수 있는 방법을 제공하는 API
무수한 데이터를 어떻게 정리하느냐에 따라 업무의 효율성에 차이가 생긴다.
다양한 자료구조형이 제공되는 이유는 데이터의 성질에 따라 데이터를 관리하는 방식이 다르기 때문



2. 자바에서 제공되는 Collection 자료구조들
List(순서, 중복 허용) : ArrayList, Vector, LinkedList
Set(순서xm 중복x) : HashSet, TreeSet
Map(key, value) : HashMap, Properties

(1) List계열 Collection 클래스
●ArrayList ; 배열과 매우 비슷. 인덱스가 존재하며 데이터는 중복을 허용. 인덱스가 가장 중요
	-add(객체)
	-add(index, 객체)
	-set(index, 객체)
	-get(index)
	-size()
	-remove(index)
	-remove(객체)
	-contains(객체) 주어진 객체가 저장되어 있는지 여부를 boolean 값으로 반환
	-isEmpty()
	-clear()	
●LinkedList ; ArrayList와 거의 비슷. ArrayList는 접근시간은 빠르나  데이터를 추가하거나 삭제하는데 많은 데이터를 옮겨야 해서 시간이 많이 걸린다는 단점이 있음.
	     이점을 보완한 것이 LinkedList. ArrayList와 달리 불연속적으로 존재하는 데이터를 연결. 
	     순차적으로 데이터를 추가/삭제할 경우 ArrayList가 빠르고 비순차적으로 데이터를 추가/삭제하는 경우 LinkedList가 빠르다. 접근시간도 ArrayList가 빠르다

(2) Map 계열 Collection 클래스
Map계열의 자료구조는 인덱스 대신 키 값으로 데이터를 액세스
List계열과 달리 인덱스가 없고, 키와 값만 있다. 그리고 키는 하나여야 함. 값을 관리하고자 한다면 키를 이용해서 값을 관리할 수 있다. 
●HashMap

(3) Set 계열 Collection 클래스
Set계열 자료구조에서는 데이터의 순서는 없음(인덱스 없음). 하지만 중복된 데이터는 허락하지 않음
중복된 데이터의 의미는 hashcode()값이 같거나 equal()메소드의 결과값에 의해 해석
●HashSet



3. Iterator(반복자)
자료구조형이 존재하는 것은 결국은 데이터를 잘 관리하기 위함. 잘 관리한다는 것은 저장하고, 정렬하고, 검색하는 것. 
이중에서 데이터의 검색은 무엇보다도 중요. 그래서 JAVA에서는 Iterator라는 인터페이스가 있다.
Iterator라는 의미는 '반복자' 라는 의미로 데이터를 반복적으로 검색하는데 아주 유용한 인터페이스
참고로 모든 자료구조형은 iterator() 메소드를 지원.


<그 밖의 TreeSet 예제>
TreeSet에 7,4,9,1,5를 저장하면 트리 구조로 좌측엔 작은 값이 우측엔 큰 값이 저장됨.
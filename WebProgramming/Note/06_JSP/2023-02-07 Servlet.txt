Servlet

1. Servlet 문서 작성하기
(1) Servlet의 특징
	① 동적 웹어플리케이션 컴포넌트 ; JSP랑 같음
	② .java 확장자 ; JAVA 언어를 사용하여 웹 프로그램을 제작하는 것
		Servlet (Interface)
		      ↑(구현)
		GenericServlet (abstract)
		      ↑(상속)
		HttpServlet
		↑(상속)
	우리가 작성한 서블릿 클래스

	③ 클라이언트의 요청에 동적으로 작동하고, 응답은 html을 이용
	④ java thread이용하여 동작 ; 서블릿을 이용하는 가장 큰 장점. 웹컴포넌트를 구성하는 다른 언어에 비해, 요청이 많이 들어와도 서버의 부하가 많이 걸리지 않는 장점
	⑤ MVC패턴에서 Controller 부분에 이용됨

(2) Servlet 파일 생성 ; 서블릿 생성 위치 확인해 보자(cf. 프로젝트 생성시 context root는 프로젝트명과 동일하게 이클립스가 만들어 준 대로 쓰자)
	① Java packate : com.tj.ex / Class Name : HelloWorld / 
	② SupperClass : javax.servlet.http.HttpServlet ; 서블릿은 일반 클래스와 다르게 상속받아야 하는 클래스가 있다. 요 글래스를 상속 받아야 서블릿 클래스가 됨
	③ 매핑 단계 : 웹상에서 접근해야 하는 주소 (닉네임을 정함)

패키지명 나오고, 클래스명 체크, 상속받은 클래스도 체크, 
이 클래스의 닉네임 정하고, 웹브라우저에서 접근할 때 닉네임으로 접근한다. 
서블릿은 doGet과 doPost 메소드 존재. 
doGet과 doPost안에 있는 내용이 실제로 
사용자 클라이언트 웹 브라우저에 출력되거나 실행되는 부분

2. 어노테이션을 이용한 서블릿 맵핑
@WebServlet(name = "HelloWorld", description = "Ex1", urlPatterns = { "/HelloWorld" })
@WebServlet("/HelloWorld")

예상경로 : http://localhost:8181/ch03_semiServlet/com.lec.ex.Ex1_HelloWorld
URL 맵핑 경로 : http://localhost:8181/ch03_semiServlet/HelloWorld

3. Web.xml에서 서블릿 맵핑
web.xml에 아래의 부분 추가
<servlet> 서블릿 이름을 정한다
	<servlet-name>helloworld</servlet-name>  
	<servlet-class>com.lec.ex.Ex1_HelloWorld</servlet-class>  
  </servlet>
  <servlet-mapping>
  	<servlet-name>helloworld</servlet-name>
  	<url-pattern>/hw</url-pattern>
</servlet-mapping>
servlet-class : 매핑할 클래스 파일명을 패키지명을 포함하여 입력
url-pattern : ‘/’로 시작해야 함.


(1) 요청처리객체 및 응답처리객체를 톰캣에서 받음
클라이언트 측 → WAS ; 톰캣에서 request 객체 생성. 요청을 하는 객체
클라이언트 측 ← WAS ; 톰캣에서 response 객체 생성. 응답을 하는 객체
요청을 하는 객체는 클라이언트로부터 오는 정보를 갖고 올 수 있다. 예를 들어 로그인 페이지에 들어가서 아이디와 패스워드를 넣고 버튼을 누르면( 회원이면 로그온이 되고 비회원이면 회원가입페이지나 거절페이지로 가도록 한다.
응답하는 객체에서는 회원이 맞는지 아닌지 결과값을 response객체에 실어 보낸다.
